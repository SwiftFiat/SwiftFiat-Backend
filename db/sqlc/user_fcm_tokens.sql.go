// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: user_fcm_tokens.sql

package db

import (
	"context"
	"database/sql"
)

const getFCMTokens = `-- name: GetFCMTokens :many
SELECT id, user_id, fcm_token, device_uuid, created_at, updated_at FROM user_fcm_tokens WHERE user_id = $1
`

func (q *Queries) GetFCMTokens(ctx context.Context, userID int64) ([]UserFcmToken, error) {
	rows, err := q.db.QueryContext(ctx, getFCMTokens, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserFcmToken{}
	for rows.Next() {
		var i UserFcmToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.FcmToken,
			&i.DeviceUuid,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeToken = `-- name: RemoveToken :exec
DELETE FROM user_fcm_tokens WHERE user_id = $1 AND fcm_token = $2
`

type RemoveTokenParams struct {
	UserID   int64  `json:"user_id"`
	FcmToken string `json:"fcm_token"`
}

func (q *Queries) RemoveToken(ctx context.Context, arg RemoveTokenParams) error {
	_, err := q.db.ExecContext(ctx, removeToken, arg.UserID, arg.FcmToken)
	return err
}

const updateFCMToken = `-- name: UpdateFCMToken :one
UPDATE user_fcm_tokens SET fcm_token = $1 WHERE user_id = $2 AND device_uuid = $3 RETURNING id, user_id, fcm_token, device_uuid, created_at, updated_at
`

type UpdateFCMTokenParams struct {
	FcmToken   string         `json:"fcm_token"`
	UserID     int64          `json:"user_id"`
	DeviceUuid sql.NullString `json:"device_uuid"`
}

func (q *Queries) UpdateFCMToken(ctx context.Context, arg UpdateFCMTokenParams) (UserFcmToken, error) {
	row := q.db.QueryRowContext(ctx, updateFCMToken, arg.FcmToken, arg.UserID, arg.DeviceUuid)
	var i UserFcmToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FcmToken,
		&i.DeviceUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertFCMToken = `-- name: UpsertFCMToken :one
INSERT INTO user_fcm_tokens (user_id, fcm_token, device_uuid) 
VALUES ($1, $2, $3)
ON CONFLICT (fcm_token) DO UPDATE 
SET 
    fcm_token = EXCLUDED.fcm_token,
    device_uuid = EXCLUDED.device_uuid,
    updated_at = NOW()
RETURNING id, user_id, fcm_token, device_uuid, created_at, updated_at
`

type UpsertFCMTokenParams struct {
	UserID     int64          `json:"user_id"`
	FcmToken   string         `json:"fcm_token"`
	DeviceUuid sql.NullString `json:"device_uuid"`
}

func (q *Queries) UpsertFCMToken(ctx context.Context, arg UpsertFCMTokenParams) (UserFcmToken, error) {
	row := q.db.QueryRowContext(ctx, upsertFCMToken, arg.UserID, arg.FcmToken, arg.DeviceUuid)
	var i UserFcmToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.FcmToken,
		&i.DeviceUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
