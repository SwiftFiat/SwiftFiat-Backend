// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: address_images.sql

package db

import (
	"context"
	"time"
)

const deleteProofImage = `-- name: DeleteProofImage :execrows
DELETE FROM proof_of_address_images
WHERE id = $1
`

func (q *Queries) DeleteProofImage(ctx context.Context, id int32) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteProofImage, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getProofImage = `-- name: GetProofImage :one
SELECT id, user_id, filename, proof_type, image_data, created_at
FROM proof_of_address_images
WHERE id = $1
`

type GetProofImageRow struct {
	ID        int32     `json:"id"`
	UserID    int32     `json:"user_id"`
	Filename  string    `json:"filename"`
	ProofType string    `json:"proof_type"`
	ImageData []byte    `json:"image_data"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) GetProofImage(ctx context.Context, id int32) (GetProofImageRow, error) {
	row := q.db.QueryRowContext(ctx, getProofImage, id)
	var i GetProofImageRow
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Filename,
		&i.ProofType,
		&i.ImageData,
		&i.CreatedAt,
	)
	return i, err
}

const insertNewProofImage = `-- name: InsertNewProofImage :one
INSERT INTO proof_of_address_images (user_id, filename, proof_type, image_data)
VALUES ($1, $2, $3, $4)
RETURNING id, user_id, filename, proof_type, image_data, created_at, updated_at, verified, verified_at
`

type InsertNewProofImageParams struct {
	UserID    int32  `json:"user_id"`
	Filename  string `json:"filename"`
	ProofType string `json:"proof_type"`
	ImageData []byte `json:"image_data"`
}

func (q *Queries) InsertNewProofImage(ctx context.Context, arg InsertNewProofImageParams) (ProofOfAddressImage, error) {
	row := q.db.QueryRowContext(ctx, insertNewProofImage,
		arg.UserID,
		arg.Filename,
		arg.ProofType,
		arg.ImageData,
	)
	var i ProofOfAddressImage
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Filename,
		&i.ProofType,
		&i.ImageData,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Verified,
		&i.VerifiedAt,
	)
	return i, err
}

const listProofImages = `-- name: ListProofImages :many
SELECT id, filename, proof_type, created_at
FROM proof_of_address_images
ORDER BY created_at DESC
`

type ListProofImagesRow struct {
	ID        int32     `json:"id"`
	Filename  string    `json:"filename"`
	ProofType string    `json:"proof_type"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) ListProofImages(ctx context.Context) ([]ListProofImagesRow, error) {
	rows, err := q.db.QueryContext(ctx, listProofImages)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProofImagesRow{}
	for rows.Next() {
		var i ListProofImagesRow
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.ProofType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listProofImagesForUser = `-- name: ListProofImagesForUser :many
SELECT id, filename, proof_type, created_at
FROM proof_of_address_images
WHERE user_id = $1
ORDER BY created_at DESC
`

type ListProofImagesForUserRow struct {
	ID        int32     `json:"id"`
	Filename  string    `json:"filename"`
	ProofType string    `json:"proof_type"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) ListProofImagesForUser(ctx context.Context, userID int32) ([]ListProofImagesForUserRow, error) {
	rows, err := q.db.QueryContext(ctx, listProofImagesForUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListProofImagesForUserRow{}
	for rows.Next() {
		var i ListProofImagesForUserRow
		if err := rows.Scan(
			&i.ID,
			&i.Filename,
			&i.ProofType,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateProofImage = `-- name: UpdateProofImage :one
UPDATE proof_of_address_images
SET filename = $2, proof_type = $3, image_data = $4
WHERE id = $1
RETURNING id, filename, proof_type, created_at
`

type UpdateProofImageParams struct {
	ID        int32  `json:"id"`
	Filename  string `json:"filename"`
	ProofType string `json:"proof_type"`
	ImageData []byte `json:"image_data"`
}

type UpdateProofImageRow struct {
	ID        int32     `json:"id"`
	Filename  string    `json:"filename"`
	ProofType string    `json:"proof_type"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) UpdateProofImage(ctx context.Context, arg UpdateProofImageParams) (UpdateProofImageRow, error) {
	row := q.db.QueryRowContext(ctx, updateProofImage,
		arg.ID,
		arg.Filename,
		arg.ProofType,
		arg.ImageData,
	)
	var i UpdateProofImageRow
	err := row.Scan(
		&i.ID,
		&i.Filename,
		&i.ProofType,
		&i.CreatedAt,
	)
	return i, err
}
