// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: referral_earnings.sql

package db

import (
	"context"
)

const createReferral = `-- name: CreateReferral :one
INSERT INTO user_referrals (referrer_id, referee_id, earned_amount)
VALUES ($1, $2, $3)
    RETURNING id, referrer_id, referee_id, earned_amount, created_at
`

type CreateReferralParams struct {
	ReferrerID   int32  `json:"referrer_id"`
	RefereeID    int32  `json:"referee_id"`
	EarnedAmount string `json:"earned_amount"`
}

func (q *Queries) CreateReferral(ctx context.Context, arg CreateReferralParams) (UserReferral, error) {
	row := q.db.QueryRowContext(ctx, createReferral, arg.ReferrerID, arg.RefereeID, arg.EarnedAmount)
	var i UserReferral
	err := row.Scan(
		&i.ID,
		&i.ReferrerID,
		&i.RefereeID,
		&i.EarnedAmount,
		&i.CreatedAt,
	)
	return i, err
}

const createReferralEarnings = `-- name: CreateReferralEarnings :one
INSERT INTO referral_earnings (user_id)
VALUES ($1)
    RETURNING id, user_id, total_earned, available_balance, withdrawn_balance, created_at, updated_at
`

func (q *Queries) CreateReferralEarnings(ctx context.Context, userID int32) (ReferralEarning, error) {
	row := q.db.QueryRowContext(ctx, createReferralEarnings, userID)
	var i ReferralEarning
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalEarned,
		&i.AvailableBalance,
		&i.WithdrawnBalance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const createWithdrawalRequest = `-- name: CreateWithdrawalRequest :one
INSERT INTO withdrawal_requests (user_id, amount)
VALUES ($1, $2)
    RETURNING id, user_id, amount, status, wallet_id, created_at, updated_at
`

type CreateWithdrawalRequestParams struct {
	UserID int32  `json:"user_id"`
	Amount string `json:"amount"`
}

func (q *Queries) CreateWithdrawalRequest(ctx context.Context, arg CreateWithdrawalRequestParams) (WithdrawalRequest, error) {
	row := q.db.QueryRowContext(ctx, createWithdrawalRequest, arg.UserID, arg.Amount)
	var i WithdrawalRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Status,
		&i.WalletID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getReferralByRefereeID = `-- name: GetReferralByRefereeID :one
SELECT id, referrer_id, referee_id, earned_amount, created_at FROM user_referrals WHERE referee_id = $1
`

func (q *Queries) GetReferralByRefereeID(ctx context.Context, refereeID int32) (UserReferral, error) {
	row := q.db.QueryRowContext(ctx, getReferralByRefereeID, refereeID)
	var i UserReferral
	err := row.Scan(
		&i.ID,
		&i.ReferrerID,
		&i.RefereeID,
		&i.EarnedAmount,
		&i.CreatedAt,
	)
	return i, err
}

const getReferralEarnings = `-- name: GetReferralEarnings :one
SELECT id, user_id, total_earned, available_balance, withdrawn_balance, created_at, updated_at FROM referral_earnings WHERE user_id = $1
`

func (q *Queries) GetReferralEarnings(ctx context.Context, userID int32) (ReferralEarning, error) {
	row := q.db.QueryRowContext(ctx, getReferralEarnings, userID)
	var i ReferralEarning
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalEarned,
		&i.AvailableBalance,
		&i.WithdrawnBalance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUserReferrals = `-- name: GetUserReferrals :many
SELECT id, referrer_id, referee_id, earned_amount, created_at FROM user_referrals WHERE referrer_id = $1
ORDER BY created_at DESC
`

func (q *Queries) GetUserReferrals(ctx context.Context, referrerID int32) ([]UserReferral, error) {
	rows, err := q.db.QueryContext(ctx, getUserReferrals, referrerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserReferral{}
	for rows.Next() {
		var i UserReferral
		if err := rows.Scan(
			&i.ID,
			&i.ReferrerID,
			&i.RefereeID,
			&i.EarnedAmount,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getWithdrawalRequest = `-- name: GetWithdrawalRequest :one
SELECT id, user_id, amount, status, wallet_id, created_at, updated_at FROM withdrawal_requests WHERE id = $1
`

func (q *Queries) GetWithdrawalRequest(ctx context.Context, id int64) (WithdrawalRequest, error) {
	row := q.db.QueryRowContext(ctx, getWithdrawalRequest, id)
	var i WithdrawalRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Status,
		&i.WalletID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listUserWithdrawalRequests = `-- name: ListUserWithdrawalRequests :many
SELECT id, user_id, amount, status, wallet_id, created_at, updated_at FROM withdrawal_requests WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListUserWithdrawalRequests(ctx context.Context, userID int32) ([]WithdrawalRequest, error) {
	rows, err := q.db.QueryContext(ctx, listUserWithdrawalRequests, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WithdrawalRequest{}
	for rows.Next() {
		var i WithdrawalRequest
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Status,
			&i.WalletID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listWithdrawalRequests = `-- name: ListWithdrawalRequests :many
SELECT id, user_id, amount, status, wallet_id, created_at, updated_at FROM withdrawal_requests
ORDER BY created_at DESC
`

func (q *Queries) ListWithdrawalRequests(ctx context.Context) ([]WithdrawalRequest, error) {
	rows, err := q.db.QueryContext(ctx, listWithdrawalRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []WithdrawalRequest{}
	for rows.Next() {
		var i WithdrawalRequest
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Amount,
			&i.Status,
			&i.WalletID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateAvailableBalanceAfterWithdrawal = `-- name: UpdateAvailableBalanceAfterWithdrawal :one
UPDATE referral_earnings
SET
    available_balance = available_balance - $2,
    withdrawn_balance = withdrawn_balance + $2,
    updated_at = NOW()
WHERE user_id = $1 AND available_balance >= $2
    RETURNING id, user_id, total_earned, available_balance, withdrawn_balance, created_at, updated_at
`

type UpdateAvailableBalanceAfterWithdrawalParams struct {
	UserID           int32  `json:"user_id"`
	AvailableBalance string `json:"available_balance"`
}

func (q *Queries) UpdateAvailableBalanceAfterWithdrawal(ctx context.Context, arg UpdateAvailableBalanceAfterWithdrawalParams) (ReferralEarning, error) {
	row := q.db.QueryRowContext(ctx, updateAvailableBalanceAfterWithdrawal, arg.UserID, arg.AvailableBalance)
	var i ReferralEarning
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalEarned,
		&i.AvailableBalance,
		&i.WithdrawnBalance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateReferralEarnings = `-- name: UpdateReferralEarnings :one
UPDATE referral_earnings
SET
    total_earned = total_earned + $2,
    available_balance = available_balance + $2,
    updated_at = NOW()
WHERE user_id = $1
    RETURNING id, user_id, total_earned, available_balance, withdrawn_balance, created_at, updated_at
`

type UpdateReferralEarningsParams struct {
	UserID      int32  `json:"user_id"`
	TotalEarned string `json:"total_earned"`
}

func (q *Queries) UpdateReferralEarnings(ctx context.Context, arg UpdateReferralEarningsParams) (ReferralEarning, error) {
	row := q.db.QueryRowContext(ctx, updateReferralEarnings, arg.UserID, arg.TotalEarned)
	var i ReferralEarning
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.TotalEarned,
		&i.AvailableBalance,
		&i.WithdrawnBalance,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateWithdrawalRequest = `-- name: UpdateWithdrawalRequest :one
UPDATE withdrawal_requests
SET
    status = $2,
    updated_at = NOW()
WHERE id = $1
    RETURNING id, user_id, amount, status, wallet_id, created_at, updated_at
`

type UpdateWithdrawalRequestParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateWithdrawalRequest(ctx context.Context, arg UpdateWithdrawalRequestParams) (WithdrawalRequest, error) {
	row := q.db.QueryRowContext(ctx, updateWithdrawalRequest, arg.ID, arg.Status)
	var i WithdrawalRequest
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Amount,
		&i.Status,
		&i.WalletID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
