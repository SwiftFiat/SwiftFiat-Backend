// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.26.0
// source: transaction_fees.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const createTransactionFee = `-- name: CreateTransactionFee :one
INSERT INTO transaction_fees (
    transaction_type,
    fee_percentage,
    max_fee,
    flat_fee,
    effective_time,
    source
) VALUES (
    $1, $2, $3, $4, $5, $6
) RETURNING id, transaction_type, fee_percentage, max_fee, flat_fee, effective_time, source, created_at
`

type CreateTransactionFeeParams struct {
	TransactionType string         `json:"transaction_type"`
	FeePercentage   sql.NullString `json:"fee_percentage"`
	MaxFee          sql.NullString `json:"max_fee"`
	FlatFee         sql.NullString `json:"flat_fee"`
	EffectiveTime   time.Time      `json:"effective_time"`
	Source          string         `json:"source"`
}

func (q *Queries) CreateTransactionFee(ctx context.Context, arg CreateTransactionFeeParams) (TransactionFee, error) {
	row := q.db.QueryRowContext(ctx, createTransactionFee,
		arg.TransactionType,
		arg.FeePercentage,
		arg.MaxFee,
		arg.FlatFee,
		arg.EffectiveTime,
		arg.Source,
	)
	var i TransactionFee
	err := row.Scan(
		&i.ID,
		&i.TransactionType,
		&i.FeePercentage,
		&i.MaxFee,
		&i.FlatFee,
		&i.EffectiveTime,
		&i.Source,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOldTransactionFees = `-- name: DeleteOldTransactionFees :exec
DELETE FROM transaction_fees 
WHERE effective_time < $1
`

func (q *Queries) DeleteOldTransactionFees(ctx context.Context, effectiveTime time.Time) error {
	_, err := q.db.ExecContext(ctx, deleteOldTransactionFees, effectiveTime)
	return err
}

const getLatestTransactionFee = `-- name: GetLatestTransactionFee :one
SELECT id, transaction_type, fee_percentage, max_fee, flat_fee, effective_time, source, created_at FROM transaction_fees
WHERE transaction_type = $1
ORDER BY effective_time DESC
LIMIT 1
`

func (q *Queries) GetLatestTransactionFee(ctx context.Context, transactionType string) (TransactionFee, error) {
	row := q.db.QueryRowContext(ctx, getLatestTransactionFee, transactionType)
	var i TransactionFee
	err := row.Scan(
		&i.ID,
		&i.TransactionType,
		&i.FeePercentage,
		&i.MaxFee,
		&i.FlatFee,
		&i.EffectiveTime,
		&i.Source,
		&i.CreatedAt,
	)
	return i, err
}

const getTransactionFeeAtTime = `-- name: GetTransactionFeeAtTime :one
SELECT id, transaction_type, fee_percentage, max_fee, flat_fee, effective_time, source, created_at FROM transaction_fees
WHERE transaction_type = $1
AND effective_time <= $2
ORDER BY effective_time DESC
LIMIT 1
`

type GetTransactionFeeAtTimeParams struct {
	TransactionType string    `json:"transaction_type"`
	EffectiveTime   time.Time `json:"effective_time"`
}

func (q *Queries) GetTransactionFeeAtTime(ctx context.Context, arg GetTransactionFeeAtTimeParams) (TransactionFee, error) {
	row := q.db.QueryRowContext(ctx, getTransactionFeeAtTime, arg.TransactionType, arg.EffectiveTime)
	var i TransactionFee
	err := row.Scan(
		&i.ID,
		&i.TransactionType,
		&i.FeePercentage,
		&i.MaxFee,
		&i.FlatFee,
		&i.EffectiveTime,
		&i.Source,
		&i.CreatedAt,
	)
	return i, err
}

const listLatestTransactionFees = `-- name: ListLatestTransactionFees :many
SELECT DISTINCT ON (transaction_type)
    transaction_type,
    fee_percentage,
    max_fee,
    flat_fee,
    effective_time,
    source
FROM transaction_fees
WHERE effective_time > '1900-01-01'
ORDER BY transaction_type, effective_time DESC
`

type ListLatestTransactionFeesRow struct {
	TransactionType string         `json:"transaction_type"`
	FeePercentage   sql.NullString `json:"fee_percentage"`
	MaxFee          sql.NullString `json:"max_fee"`
	FlatFee         sql.NullString `json:"flat_fee"`
	EffectiveTime   time.Time      `json:"effective_time"`
	Source          string         `json:"source"`
}

func (q *Queries) ListLatestTransactionFees(ctx context.Context) ([]ListLatestTransactionFeesRow, error) {
	rows, err := q.db.QueryContext(ctx, listLatestTransactionFees)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ListLatestTransactionFeesRow{}
	for rows.Next() {
		var i ListLatestTransactionFeesRow
		if err := rows.Scan(
			&i.TransactionType,
			&i.FeePercentage,
			&i.MaxFee,
			&i.FlatFee,
			&i.EffectiveTime,
			&i.Source,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listTransactionFees = `-- name: ListTransactionFees :many
SELECT id, transaction_type, fee_percentage, max_fee, flat_fee, effective_time, source, created_at FROM transaction_fees
WHERE transaction_type = $1
AND effective_time BETWEEN $2 AND $3
ORDER BY effective_time DESC
`

type ListTransactionFeesParams struct {
	TransactionType string    `json:"transaction_type"`
	EffectiveTime   time.Time `json:"effective_time"`
	EffectiveTime_2 time.Time `json:"effective_time_2"`
}

func (q *Queries) ListTransactionFees(ctx context.Context, arg ListTransactionFeesParams) ([]TransactionFee, error) {
	rows, err := q.db.QueryContext(ctx, listTransactionFees, arg.TransactionType, arg.EffectiveTime, arg.EffectiveTime_2)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []TransactionFee{}
	for rows.Next() {
		var i TransactionFee
		if err := rows.Scan(
			&i.ID,
			&i.TransactionType,
			&i.FeePercentage,
			&i.MaxFee,
			&i.FlatFee,
			&i.EffectiveTime,
			&i.Source,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
