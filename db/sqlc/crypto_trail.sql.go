// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: crypto_trail.sql

package db

import (
	"context"
	"database/sql"
)

const checkCryptoTransactionTrailByTransactionHash = `-- name: CheckCryptoTransactionTrailByTransactionHash :one
SELECT EXISTS (
    SELECT 1
    FROM crypto_transaction_trail
    WHERE transaction_hash = $1
) AS exists
`

func (q *Queries) CheckCryptoTransactionTrailByTransactionHash(ctx context.Context, transactionHash string) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkCryptoTransactionTrailByTransactionHash, transactionHash)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const createCryptoTransactionTrail = `-- name: CreateCryptoTransactionTrail :one
INSERT INTO crypto_transaction_trail (address_id, transaction_hash, amount)
VALUES ($1, $2, $3)
RETURNING id, address_id, transaction_hash, amount, created_at, updated_at
`

type CreateCryptoTransactionTrailParams struct {
	AddressID       string         `json:"address_id"`
	TransactionHash string         `json:"transaction_hash"`
	Amount          sql.NullString `json:"amount"`
}

func (q *Queries) CreateCryptoTransactionTrail(ctx context.Context, arg CreateCryptoTransactionTrailParams) (CryptoTransactionTrail, error) {
	row := q.db.QueryRowContext(ctx, createCryptoTransactionTrail, arg.AddressID, arg.TransactionHash, arg.Amount)
	var i CryptoTransactionTrail
	err := row.Scan(
		&i.ID,
		&i.AddressID,
		&i.TransactionHash,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteCryptoTransactionTrailByTransactionHash = `-- name: DeleteCryptoTransactionTrailByTransactionHash :one
DELETE FROM crypto_transaction_trail
WHERE transaction_hash = $1
RETURNING id, address_id, transaction_hash, amount, created_at, updated_at
`

func (q *Queries) DeleteCryptoTransactionTrailByTransactionHash(ctx context.Context, transactionHash string) (CryptoTransactionTrail, error) {
	row := q.db.QueryRowContext(ctx, deleteCryptoTransactionTrailByTransactionHash, transactionHash)
	var i CryptoTransactionTrail
	err := row.Scan(
		&i.ID,
		&i.AddressID,
		&i.TransactionHash,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const fetchCryptoTransactionTrailByAddressID = `-- name: FetchCryptoTransactionTrailByAddressID :many
SELECT id, address_id, transaction_hash, amount, created_at, updated_at
FROM crypto_transaction_trail
WHERE address_id = $1
`

func (q *Queries) FetchCryptoTransactionTrailByAddressID(ctx context.Context, addressID string) ([]CryptoTransactionTrail, error) {
	rows, err := q.db.QueryContext(ctx, fetchCryptoTransactionTrailByAddressID, addressID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []CryptoTransactionTrail{}
	for rows.Next() {
		var i CryptoTransactionTrail
		if err := rows.Scan(
			&i.ID,
			&i.AddressID,
			&i.TransactionHash,
			&i.Amount,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const fetchCryptoTransactionTrailByTransactionHash = `-- name: FetchCryptoTransactionTrailByTransactionHash :one
SELECT id, address_id, transaction_hash, amount, created_at, updated_at
FROM crypto_transaction_trail
WHERE transaction_hash = $1
`

func (q *Queries) FetchCryptoTransactionTrailByTransactionHash(ctx context.Context, transactionHash string) (CryptoTransactionTrail, error) {
	row := q.db.QueryRowContext(ctx, fetchCryptoTransactionTrailByTransactionHash, transactionHash)
	var i CryptoTransactionTrail
	err := row.Scan(
		&i.ID,
		&i.AddressID,
		&i.TransactionHash,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateCryptoTransactionTrailAmountByTransactionHash = `-- name: UpdateCryptoTransactionTrailAmountByTransactionHash :one
UPDATE crypto_transaction_trail
SET amount = amount + $2,
    updated_at = NOW()
WHERE transaction_hash = $1
RETURNING id, address_id, transaction_hash, amount, created_at, updated_at
`

type UpdateCryptoTransactionTrailAmountByTransactionHashParams struct {
	TransactionHash string         `json:"transaction_hash"`
	Amount          sql.NullString `json:"amount"`
}

func (q *Queries) UpdateCryptoTransactionTrailAmountByTransactionHash(ctx context.Context, arg UpdateCryptoTransactionTrailAmountByTransactionHashParams) (CryptoTransactionTrail, error) {
	row := q.db.QueryRowContext(ctx, updateCryptoTransactionTrailAmountByTransactionHash, arg.TransactionHash, arg.Amount)
	var i CryptoTransactionTrail
	err := row.Scan(
		&i.ID,
		&i.AddressID,
		&i.TransactionHash,
		&i.Amount,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
