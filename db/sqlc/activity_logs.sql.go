// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: activity_logs.sql

package db

import (
	"context"
	"time"
)

const countActiveUsers = `-- name: CountActiveUsers :one
SELECT COUNT(DISTINCT user_id) as active_users
FROM activity_logs
WHERE created_at >= $1 AND created_at < $2
  AND user_id IS NOT NULL
`

type CountActiveUsersParams struct {
	CreatedAt   time.Time `json:"created_at"`
	CreatedAt_2 time.Time `json:"created_at_2"`
}

func (q *Queries) CountActiveUsers(ctx context.Context, arg CountActiveUsersParams) (int64, error) {
	row := q.db.QueryRowContext(ctx, countActiveUsers, arg.CreatedAt, arg.CreatedAt_2)
	var active_users int64
	err := row.Scan(&active_users)
	return active_users, err
}

const createActivityLog = `-- name: CreateActivityLog :one
INSERT INTO activity_logs (
    user_id, action, created_at
) VALUES (
    $1, $2, $3
)
RETURNING id, user_id, action, created_at
`

type CreateActivityLogParams struct {
	UserID    int32     `json:"user_id"`
	Action    string    `json:"action"`
	CreatedAt time.Time `json:"created_at"`
}

func (q *Queries) CreateActivityLog(ctx context.Context, arg CreateActivityLogParams) (ActivityLog, error) {
	row := q.db.QueryRowContext(ctx, createActivityLog, arg.UserID, arg.Action, arg.CreatedAt)
	var i ActivityLog
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Action,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOldActivityLogs = `-- name: DeleteOldActivityLogs :exec
DELETE FROM activity_logs
WHERE created_at < NOW() - INTERVAL '3 days'
`

func (q *Queries) DeleteOldActivityLogs(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteOldActivityLogs)
	return err
}

const getActivityLogsByUser = `-- name: GetActivityLogsByUser :many
SELECT id, user_id, action, created_at FROM activity_logs
WHERE user_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetActivityLogsByUserParams struct {
	UserID int32 `json:"user_id"`
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetActivityLogsByUser(ctx context.Context, arg GetActivityLogsByUserParams) ([]ActivityLog, error) {
	rows, err := q.db.QueryContext(ctx, getActivityLogsByUser, arg.UserID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityLog{}
	for rows.Next() {
		var i ActivityLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getRecentActivityLogs = `-- name: GetRecentActivityLogs :many
SELECT id, user_id, action, created_at FROM activity_logs
ORDER BY created_at DESC
LIMIT $1 OFFSET $2
`

type GetRecentActivityLogsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) GetRecentActivityLogs(ctx context.Context, arg GetRecentActivityLogsParams) ([]ActivityLog, error) {
	rows, err := q.db.QueryContext(ctx, getRecentActivityLogs, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []ActivityLog{}
	for rows.Next() {
		var i ActivityLog
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Action,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
