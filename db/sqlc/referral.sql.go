// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: referral.sql

package db

import (
	"context"
)

const createNewReferral = `-- name: CreateNewReferral :one
INSERT INTO referrals (
    user_id,
    referral_key
) VALUES ($1, $2) RETURNING id, user_id, referral_key, created_at, updated_at
`

type CreateNewReferralParams struct {
	UserID      int32  `json:"user_id"`
	ReferralKey string `json:"referral_key"`
}

func (q *Queries) CreateNewReferral(ctx context.Context, arg CreateNewReferralParams) (Referral, error) {
	row := q.db.QueryRowContext(ctx, createNewReferral, arg.UserID, arg.ReferralKey)
	var i Referral
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ReferralKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteAllReferrals = `-- name: DeleteAllReferrals :exec
DELETE FROM referrals
`

func (q *Queries) DeleteAllReferrals(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllReferrals)
	return err
}

const deleteReferral = `-- name: DeleteReferral :exec
DELETE FROM referrals WHERE id = $1
`

func (q *Queries) DeleteReferral(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReferral, id)
	return err
}

const getReferralByID = `-- name: GetReferralByID :one
SELECT id, user_id, referral_key, created_at, updated_at FROM referrals WHERE id = $1
`

func (q *Queries) GetReferralByID(ctx context.Context, id int64) (Referral, error) {
	row := q.db.QueryRowContext(ctx, getReferralByID, id)
	var i Referral
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ReferralKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getReferralByUserID = `-- name: GetReferralByUserID :one
SELECT id, user_id, referral_key, created_at, updated_at FROM referrals WHERE user_id = $1
`

func (q *Queries) GetReferralByUserID(ctx context.Context, userID int32) (Referral, error) {
	row := q.db.QueryRowContext(ctx, getReferralByUserID, userID)
	var i Referral
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ReferralKey,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
