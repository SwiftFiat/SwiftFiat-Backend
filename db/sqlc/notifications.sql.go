// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: notifications.sql

package db

import (
	"context"
	"database/sql"
)

const createNotification = `-- name: CreateNotification :one
INSERT INTO notifications (user_id, message)
VALUES ($1, $2)
RETURNING id, user_id, message, read, created_at
`

type CreateNotificationParams struct {
	UserID  sql.NullInt32 `json:"user_id"`
	Message string        `json:"message"`
}

func (q *Queries) CreateNotification(ctx context.Context, arg CreateNotificationParams) (Notification, error) {
	row := q.db.QueryRowContext(ctx, createNotification, arg.UserID, arg.Message)
	var i Notification
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Message,
		&i.Read,
		&i.CreatedAt,
	)
	return i, err
}

const deleteNotification = `-- name: DeleteNotification :exec
DELETE FROM notifications
WHERE id = $1 AND user_id = $2
`

type DeleteNotificationParams struct {
	ID     int32         `json:"id"`
	UserID sql.NullInt32 `json:"user_id"`
}

func (q *Queries) DeleteNotification(ctx context.Context, arg DeleteNotificationParams) error {
	_, err := q.db.ExecContext(ctx, deleteNotification, arg.ID, arg.UserID)
	return err
}

const listNotificationsByUser = `-- name: ListNotificationsByUser :many
SELECT id, user_id, message, read, created_at
FROM notifications
WHERE user_id = $1
ORDER BY created_at DESC
`

func (q *Queries) ListNotificationsByUser(ctx context.Context, userID sql.NullInt32) ([]Notification, error) {
	rows, err := q.db.QueryContext(ctx, listNotificationsByUser, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Notification{}
	for rows.Next() {
		var i Notification
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Message,
			&i.Read,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
