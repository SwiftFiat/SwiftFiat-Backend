// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: user_tokens.sql

package db

import (
	"context"
	"database/sql"
)

const getTokens = `-- name: GetTokens :many
SELECT id, user_id, token, provider, device_uuid, created_at, updated_at FROM user_tokens WHERE user_id = $1
`

func (q *Queries) GetTokens(ctx context.Context, userID int64) ([]UserToken, error) {
	rows, err := q.db.QueryContext(ctx, getTokens, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []UserToken{}
	for rows.Next() {
		var i UserToken
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Token,
			&i.Provider,
			&i.DeviceUuid,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeToken = `-- name: RemoveToken :exec
DELETE FROM user_tokens WHERE user_id = $1 AND token = $2
`

type RemoveTokenParams struct {
	UserID int64  `json:"user_id"`
	Token  string `json:"token"`
}

func (q *Queries) RemoveToken(ctx context.Context, arg RemoveTokenParams) error {
	_, err := q.db.ExecContext(ctx, removeToken, arg.UserID, arg.Token)
	return err
}

const updateToken = `-- name: UpdateToken :one
UPDATE user_tokens SET token = $1 WHERE user_id = $2 AND device_uuid = $3 RETURNING id, user_id, token, provider, device_uuid, created_at, updated_at
`

type UpdateTokenParams struct {
	Token      string         `json:"token"`
	UserID     int64          `json:"user_id"`
	DeviceUuid sql.NullString `json:"device_uuid"`
}

func (q *Queries) UpdateToken(ctx context.Context, arg UpdateTokenParams) (UserToken, error) {
	row := q.db.QueryRowContext(ctx, updateToken, arg.Token, arg.UserID, arg.DeviceUuid)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Provider,
		&i.DeviceUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const upsertToken = `-- name: UpsertToken :one
INSERT INTO user_tokens (user_id, token, provider, device_uuid) 
VALUES ($1, $2, $3, $4)
ON CONFLICT (token) DO UPDATE 
SET 
    token = EXCLUDED.token,
    provider = EXCLUDED.provider,
    device_uuid = EXCLUDED.device_uuid,
    updated_at = NOW()
RETURNING id, user_id, token, provider, device_uuid, created_at, updated_at
`

type UpsertTokenParams struct {
	UserID     int64          `json:"user_id"`
	Token      string         `json:"token"`
	Provider   string         `json:"provider"`
	DeviceUuid sql.NullString `json:"device_uuid"`
}

func (q *Queries) UpsertToken(ctx context.Context, arg UpsertTokenParams) (UserToken, error) {
	row := q.db.QueryRowContext(ctx, upsertToken,
		arg.UserID,
		arg.Token,
		arg.Provider,
		arg.DeviceUuid,
	)
	var i UserToken
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Token,
		&i.Provider,
		&i.DeviceUuid,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
