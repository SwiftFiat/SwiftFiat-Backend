// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: ledger.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createWalletLedgerEntry = `-- name: CreateWalletLedgerEntry :one
INSERT INTO ledger_entries (
    transaction_id,
    wallet_id,
    type,
    amount,
    balance,
    source_type,
    destination_type
) VALUES (
    $1, $2, $3, $4, $5, $6, $7
) RETURNING id, transaction_id, wallet_id, type, amount, balance, created_at, source_type, destination_type, deleted_account_id
`

type CreateWalletLedgerEntryParams struct {
	TransactionID   uuid.NullUUID `json:"transaction_id"`
	WalletID        uuid.NullUUID `json:"wallet_id"`
	Type            string        `json:"type"`
	Amount          string        `json:"amount"`
	Balance         string        `json:"balance"`
	SourceType      string        `json:"source_type"`
	DestinationType string        `json:"destination_type"`
}

func (q *Queries) CreateWalletLedgerEntry(ctx context.Context, arg CreateWalletLedgerEntryParams) (LedgerEntry, error) {
	row := q.db.QueryRowContext(ctx, createWalletLedgerEntry,
		arg.TransactionID,
		arg.WalletID,
		arg.Type,
		arg.Amount,
		arg.Balance,
		arg.SourceType,
		arg.DestinationType,
	)
	var i LedgerEntry
	err := row.Scan(
		&i.ID,
		&i.TransactionID,
		&i.WalletID,
		&i.Type,
		&i.Amount,
		&i.Balance,
		&i.CreatedAt,
		&i.SourceType,
		&i.DestinationType,
		&i.DeletedAccountID,
	)
	return i, err
}

const getWalletLedger = `-- name: GetWalletLedger :many
SELECT id, transaction_id, wallet_id, type, amount, balance, created_at, source_type, destination_type, deleted_account_id FROM ledger_entries
WHERE wallet_id = $1
ORDER BY created_at DESC
LIMIT $2 OFFSET $3
`

type GetWalletLedgerParams struct {
	WalletID uuid.NullUUID `json:"wallet_id"`
	Limit    int32         `json:"limit"`
	Offset   int32         `json:"offset"`
}

func (q *Queries) GetWalletLedger(ctx context.Context, arg GetWalletLedgerParams) ([]LedgerEntry, error) {
	rows, err := q.db.QueryContext(ctx, getWalletLedger, arg.WalletID, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []LedgerEntry{}
	for rows.Next() {
		var i LedgerEntry
		if err := rows.Scan(
			&i.ID,
			&i.TransactionID,
			&i.WalletID,
			&i.Type,
			&i.Amount,
			&i.Balance,
			&i.CreatedAt,
			&i.SourceType,
			&i.DestinationType,
			&i.DeletedAccountID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}
