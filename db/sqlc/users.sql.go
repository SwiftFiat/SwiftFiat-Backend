// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: users.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const checkUserTag = `-- name: CheckUserTag :one
SELECT EXISTS (
    SELECT 1
    FROM users WHERE user_tag = $1
) AS exists
`

func (q *Queries) CheckUserTag(ctx context.Context, userTag sql.NullString) (bool, error) {
	row := q.db.QueryRowContext(ctx, checkUserTag, userTag)
	var exists bool
	err := row.Scan(&exists)
	return exists, err
}

const countNewUsersToday = `-- name: CountNewUsersToday :one
SELECT COUNT(*)
FROM users
WHERE created_at::date = CURRENT_DATE
  AND deleted_at IS NULL
`

func (q *Queries) CountNewUsersToday(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, countNewUsersToday)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO users (
    first_name,
    last_name,
    email,
    phone_number,
    hashed_password,
    role
) VALUES ($1, $2, $3, $4, $5, $6) RETURNING id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id
`

type CreateUserParams struct {
	FirstName      sql.NullString `json:"first_name"`
	LastName       sql.NullString `json:"last_name"`
	Email          string         `json:"email"`
	PhoneNumber    string         `json:"phone_number"`
	HashedPassword sql.NullString `json:"hashed_password"`
	Role           string         `json:"role"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.PhoneNumber,
		arg.HashedPassword,
		arg.Role,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const deleteAllUsers = `-- name: DeleteAllUsers :exec
DELETE FROM users
`

func (q *Queries) DeleteAllUsers(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllUsers)
	return err
}

const deleteUser = `-- name: DeleteUser :one
UPDATE users 
SET phone_number = $1,
    email = $2,
    first_name = $3,
    deleted_at = NOW()
WHERE id = $4
RETURNING id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id
`

type DeleteUserParams struct {
	PhoneNumber string         `json:"phone_number"`
	Email       string         `json:"email"`
	FirstName   sql.NullString `json:"first_name"`
	ID          int64          `json:"id"`
}

func (q *Queries) DeleteUser(ctx context.Context, arg DeleteUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, deleteUser,
		arg.PhoneNumber,
		arg.Email,
		arg.FirstName,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const getUserAvatar = `-- name: GetUserAvatar :one
SELECT avatar_url, avatar_blob FROM users WHERE avatar_url = $1
`

type GetUserAvatarRow struct {
	AvatarUrl  sql.NullString `json:"avatar_url"`
	AvatarBlob []byte         `json:"avatar_blob"`
}

func (q *Queries) GetUserAvatar(ctx context.Context, avatarUrl sql.NullString) (GetUserAvatarRow, error) {
	row := q.db.QueryRowContext(ctx, getUserAvatar, avatarUrl)
	var i GetUserAvatarRow
	err := row.Scan(&i.AvatarUrl, &i.AvatarBlob)
	return i, err
}

const getUserByEmail = `-- name: GetUserByEmail :one
SELECT id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id FROM users WHERE email = $1 and deleted_at is null
`

func (q *Queries) GetUserByEmail(ctx context.Context, email string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByEmail, email)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const getUserByID = `-- name: GetUserByID :one
SELECT id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id FROM users WHERE id = $1
`

func (q *Queries) GetUserByID(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByID, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const getUserByPhone = `-- name: GetUserByPhone :one
SELECT id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id FROM users WHERE phone_number = $1 and deleted_at is null
`

func (q *Queries) GetUserByPhone(ctx context.Context, phoneNumber string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUserByPhone, phoneNumber)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const getUserNameByUserTag = `-- name: GetUserNameByUserTag :one
SELECT first_name, last_name FROM users WHERE user_tag = $1
`

type GetUserNameByUserTagRow struct {
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
}

func (q *Queries) GetUserNameByUserTag(ctx context.Context, userTag sql.NullString) (GetUserNameByUserTagRow, error) {
	row := q.db.QueryRowContext(ctx, getUserNameByUserTag, userTag)
	var i GetUserNameByUserTagRow
	err := row.Scan(&i.FirstName, &i.LastName)
	return i, err
}

const listAdmins = `-- name: ListAdmins :many
SELECT id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id FROM users WHERE role=$1 ORDER BY id
LIMIT $2 OFFSET $3
`

type ListAdminsParams struct {
	Role   string `json:"role"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) ListAdmins(ctx context.Context, arg ListAdminsParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listAdmins, arg.Role, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.AvatarUrl,
			&i.AvatarBlob,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.HashedPassword,
			&i.HashedPasscode,
			&i.HashedPin,
			&i.PhoneNumber,
			&i.Role,
			&i.Verified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.HasWallets,
			&i.UserTag,
			&i.FreshChatID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listUsers = `-- name: ListUsers :many
SELECT id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id FROM users WHERE deleted_at IS NULL ORDER BY id
LIMIT $1 OFFSET $2
`

type ListUsersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListUsers(ctx context.Context, arg ListUsersParams) ([]User, error) {
	rows, err := q.db.QueryContext(ctx, listUsers, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []User{}
	for rows.Next() {
		var i User
		if err := rows.Scan(
			&i.ID,
			&i.AvatarUrl,
			&i.AvatarBlob,
			&i.FirstName,
			&i.LastName,
			&i.Email,
			&i.HashedPassword,
			&i.HashedPasscode,
			&i.HashedPin,
			&i.PhoneNumber,
			&i.Role,
			&i.Verified,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.DeletedAt,
			&i.HasWallets,
			&i.UserTag,
			&i.FreshChatID,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateUserAvatar = `-- name: UpdateUserAvatar :one
UPDATE users SET avatar_url = $1, avatar_blob = $2, updated_at = $3
WHERE id = $4 RETURNING id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id
`

type UpdateUserAvatarParams struct {
	AvatarUrl  sql.NullString `json:"avatar_url"`
	AvatarBlob []byte         `json:"avatar_blob"`
	UpdatedAt  time.Time      `json:"updated_at"`
	ID         int64          `json:"id"`
}

func (q *Queries) UpdateUserAvatar(ctx context.Context, arg UpdateUserAvatarParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserAvatar,
		arg.AvatarUrl,
		arg.AvatarBlob,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const updateUserFirstName = `-- name: UpdateUserFirstName :one
UPDATE users SET first_name = $1, updated_at = $2
WHERE id = $3 RETURNING id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id
`

type UpdateUserFirstNameParams struct {
	FirstName sql.NullString `json:"first_name"`
	UpdatedAt time.Time      `json:"updated_at"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateUserFirstName(ctx context.Context, arg UpdateUserFirstNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserFirstName, arg.FirstName, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const updateUserFreshChatID = `-- name: UpdateUserFreshChatID :one
UPDATE users SET fresh_chat_id = $1, updated_at = $2
WHERE id = $3 RETURNING id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id
`

type UpdateUserFreshChatIDParams struct {
	FreshChatID sql.NullString `json:"fresh_chat_id"`
	UpdatedAt   time.Time      `json:"updated_at"`
	ID          int64          `json:"id"`
}

func (q *Queries) UpdateUserFreshChatID(ctx context.Context, arg UpdateUserFreshChatIDParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserFreshChatID, arg.FreshChatID, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const updateUserLastName = `-- name: UpdateUserLastName :one
UPDATE users SET last_name = $1, updated_at = $2
WHERE id = $3 RETURNING id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id
`

type UpdateUserLastNameParams struct {
	LastName  sql.NullString `json:"last_name"`
	UpdatedAt time.Time      `json:"updated_at"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateUserLastName(ctx context.Context, arg UpdateUserLastNameParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserLastName, arg.LastName, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const updateUserNames = `-- name: UpdateUserNames :one
UPDATE users SET first_name = $1, last_name = $2, updated_at = $3
WHERE id = $4 RETURNING id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id
`

type UpdateUserNamesParams struct {
	FirstName sql.NullString `json:"first_name"`
	LastName  sql.NullString `json:"last_name"`
	UpdatedAt time.Time      `json:"updated_at"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateUserNames(ctx context.Context, arg UpdateUserNamesParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserNames,
		arg.FirstName,
		arg.LastName,
		arg.UpdatedAt,
		arg.ID,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const updateUserPasscodee = `-- name: UpdateUserPasscodee :one
UPDATE users SET hashed_passcode = $1, updated_at = $2
WHERE id = $3 RETURNING id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id
`

type UpdateUserPasscodeeParams struct {
	HashedPasscode sql.NullString `json:"hashed_passcode"`
	UpdatedAt      time.Time      `json:"updated_at"`
	ID             int64          `json:"id"`
}

func (q *Queries) UpdateUserPasscodee(ctx context.Context, arg UpdateUserPasscodeeParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPasscodee, arg.HashedPasscode, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const updateUserPassword = `-- name: UpdateUserPassword :one
UPDATE users SET hashed_password = $1, updated_at = $2
WHERE id = $3 RETURNING id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id
`

type UpdateUserPasswordParams struct {
	HashedPassword sql.NullString `json:"hashed_password"`
	UpdatedAt      time.Time      `json:"updated_at"`
	ID             int64          `json:"id"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPassword, arg.HashedPassword, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const updateUserPhone = `-- name: UpdateUserPhone :one
UPDATE users SET phone_number = $1, updated_at = $2
WHERE id = $3 RETURNING id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id
`

type UpdateUserPhoneParams struct {
	PhoneNumber string    `json:"phone_number"`
	UpdatedAt   time.Time `json:"updated_at"`
	ID          int64     `json:"id"`
}

func (q *Queries) UpdateUserPhone(ctx context.Context, arg UpdateUserPhoneParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPhone, arg.PhoneNumber, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const updateUserPin = `-- name: UpdateUserPin :one
UPDATE users SET hashed_pin = $1, updated_at = $2
WHERE id = $3 RETURNING id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id
`

type UpdateUserPinParams struct {
	HashedPin sql.NullString `json:"hashed_pin"`
	UpdatedAt time.Time      `json:"updated_at"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateUserPin(ctx context.Context, arg UpdateUserPinParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserPin, arg.HashedPin, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const updateUserTag = `-- name: UpdateUserTag :one
UPDATE users SET user_tag = $1, updated_at = $2
WHERE id = $3 RETURNING id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id
`

type UpdateUserTagParams struct {
	UserTag   sql.NullString `json:"user_tag"`
	UpdatedAt time.Time      `json:"updated_at"`
	ID        int64          `json:"id"`
}

func (q *Queries) UpdateUserTag(ctx context.Context, arg UpdateUserTagParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserTag, arg.UserTag, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const updateUserVerification = `-- name: UpdateUserVerification :one
UPDATE users SET verified = $1, updated_at = $2
WHERE id = $3 RETURNING id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id
`

type UpdateUserVerificationParams struct {
	Verified  bool      `json:"verified"`
	UpdatedAt time.Time `json:"updated_at"`
	ID        int64     `json:"id"`
}

func (q *Queries) UpdateUserVerification(ctx context.Context, arg UpdateUserVerificationParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserVerification, arg.Verified, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}

const updateUserWalletStatus = `-- name: UpdateUserWalletStatus :one
UPDATE users SET has_wallets = $1, updated_at = $2
WHERE id = $3 RETURNING id, avatar_url, avatar_blob, first_name, last_name, email, hashed_password, hashed_passcode, hashed_pin, phone_number, role, verified, created_at, updated_at, deleted_at, has_wallets, user_tag, fresh_chat_id
`

type UpdateUserWalletStatusParams struct {
	HasWallets bool      `json:"has_wallets"`
	UpdatedAt  time.Time `json:"updated_at"`
	ID         int64     `json:"id"`
}

func (q *Queries) UpdateUserWalletStatus(ctx context.Context, arg UpdateUserWalletStatusParams) (User, error) {
	row := q.db.QueryRowContext(ctx, updateUserWalletStatus, arg.HasWallets, arg.UpdatedAt, arg.ID)
	var i User
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
	)
	return i, err
}
