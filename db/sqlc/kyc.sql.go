// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: kyc.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/sqlc-dev/pqtype"
)

const createNewKYC = `-- name: CreateNewKYC :one
INSERT INTO kyc (
    user_id,
    tier,
    status
) VALUES ($1, $2, 'pending') RETURNING id, user_id, tier, daily_transfer_limit_ngn, wallet_balance_limit_ngn, status, verification_date, full_name, phone_number, email, bvn, nin, gender, selfie_url, id_type, id_number, id_image_url, state, lga, house_number, street_name, nearest_landmark, proof_of_address_type, proof_of_address_url, proof_of_address_date, created_at, updated_at, additional_info
`

type CreateNewKYCParams struct {
	UserID int32 `json:"user_id"`
	Tier   int32 `json:"tier"`
}

func (q *Queries) CreateNewKYC(ctx context.Context, arg CreateNewKYCParams) (Kyc, error) {
	row := q.db.QueryRowContext(ctx, createNewKYC, arg.UserID, arg.Tier)
	var i Kyc
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Tier,
		&i.DailyTransferLimitNgn,
		&i.WalletBalanceLimitNgn,
		&i.Status,
		&i.VerificationDate,
		&i.FullName,
		&i.PhoneNumber,
		&i.Email,
		&i.Bvn,
		&i.Nin,
		&i.Gender,
		&i.SelfieUrl,
		&i.IDType,
		&i.IDNumber,
		&i.IDImageUrl,
		&i.State,
		&i.Lga,
		&i.HouseNumber,
		&i.StreetName,
		&i.NearestLandmark,
		&i.ProofOfAddressType,
		&i.ProofOfAddressUrl,
		&i.ProofOfAddressDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdditionalInfo,
	)
	return i, err
}

const deleteKYC = `-- name: DeleteKYC :execrows
DELETE FROM kyc WHERE id = $1
`

func (q *Queries) DeleteKYC(ctx context.Context, id int64) (int64, error) {
	result, err := q.db.ExecContext(ctx, deleteKYC, id)
	if err != nil {
		return 0, err
	}
	return result.RowsAffected()
}

const getKYCByID = `-- name: GetKYCByID :one
SELECT id, user_id, tier, daily_transfer_limit_ngn, wallet_balance_limit_ngn, status, verification_date, full_name, phone_number, email, bvn, nin, gender, selfie_url, id_type, id_number, id_image_url, state, lga, house_number, street_name, nearest_landmark, proof_of_address_type, proof_of_address_url, proof_of_address_date, created_at, updated_at, additional_info FROM kyc WHERE id = $1 LIMIT 1
`

func (q *Queries) GetKYCByID(ctx context.Context, id int64) (Kyc, error) {
	row := q.db.QueryRowContext(ctx, getKYCByID, id)
	var i Kyc
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Tier,
		&i.DailyTransferLimitNgn,
		&i.WalletBalanceLimitNgn,
		&i.Status,
		&i.VerificationDate,
		&i.FullName,
		&i.PhoneNumber,
		&i.Email,
		&i.Bvn,
		&i.Nin,
		&i.Gender,
		&i.SelfieUrl,
		&i.IDType,
		&i.IDNumber,
		&i.IDImageUrl,
		&i.State,
		&i.Lga,
		&i.HouseNumber,
		&i.StreetName,
		&i.NearestLandmark,
		&i.ProofOfAddressType,
		&i.ProofOfAddressUrl,
		&i.ProofOfAddressDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdditionalInfo,
	)
	return i, err
}

const getKYCByTier = `-- name: GetKYCByTier :many
SELECT id, user_id, tier, daily_transfer_limit_ngn, wallet_balance_limit_ngn, status, verification_date, full_name, phone_number, email, bvn, nin, gender, selfie_url, id_type, id_number, id_image_url, state, lga, house_number, street_name, nearest_landmark, proof_of_address_type, proof_of_address_url, proof_of_address_date, created_at, updated_at, additional_info FROM kyc 
WHERE tier = $1 
ORDER BY created_at DESC
`

func (q *Queries) GetKYCByTier(ctx context.Context, tier int32) ([]Kyc, error) {
	rows, err := q.db.QueryContext(ctx, getKYCByTier, tier)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Kyc{}
	for rows.Next() {
		var i Kyc
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Tier,
			&i.DailyTransferLimitNgn,
			&i.WalletBalanceLimitNgn,
			&i.Status,
			&i.VerificationDate,
			&i.FullName,
			&i.PhoneNumber,
			&i.Email,
			&i.Bvn,
			&i.Nin,
			&i.Gender,
			&i.SelfieUrl,
			&i.IDType,
			&i.IDNumber,
			&i.IDImageUrl,
			&i.State,
			&i.Lga,
			&i.HouseNumber,
			&i.StreetName,
			&i.NearestLandmark,
			&i.ProofOfAddressType,
			&i.ProofOfAddressUrl,
			&i.ProofOfAddressDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AdditionalInfo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getKYCByUserID = `-- name: GetKYCByUserID :one
SELECT id, user_id, tier, daily_transfer_limit_ngn, wallet_balance_limit_ngn, status, verification_date, full_name, phone_number, email, bvn, nin, gender, selfie_url, id_type, id_number, id_image_url, state, lga, house_number, street_name, nearest_landmark, proof_of_address_type, proof_of_address_url, proof_of_address_date, created_at, updated_at, additional_info FROM kyc WHERE user_id = $1 LIMIT 1
`

func (q *Queries) GetKYCByUserID(ctx context.Context, userID int32) (Kyc, error) {
	row := q.db.QueryRowContext(ctx, getKYCByUserID, userID)
	var i Kyc
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Tier,
		&i.DailyTransferLimitNgn,
		&i.WalletBalanceLimitNgn,
		&i.Status,
		&i.VerificationDate,
		&i.FullName,
		&i.PhoneNumber,
		&i.Email,
		&i.Bvn,
		&i.Nin,
		&i.Gender,
		&i.SelfieUrl,
		&i.IDType,
		&i.IDNumber,
		&i.IDImageUrl,
		&i.State,
		&i.Lga,
		&i.HouseNumber,
		&i.StreetName,
		&i.NearestLandmark,
		&i.ProofOfAddressType,
		&i.ProofOfAddressUrl,
		&i.ProofOfAddressDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdditionalInfo,
	)
	return i, err
}

const getKYCStats = `-- name: GetKYCStats :one
SELECT 
    COUNT(*) as total_kyc,
    COUNT(CASE WHEN status = 'pending' THEN 1 END) as pending_count,
    COUNT(CASE WHEN status = 'active' THEN 1 END) as active_count,
    COUNT(CASE WHEN status = 'rejected' THEN 1 END) as rejected_count,
    COUNT(CASE WHEN tier = 1 THEN 1 END) as tier1_count,
    COUNT(CASE WHEN tier = 2 THEN 1 END) as tier2_count,
    COUNT(CASE WHEN tier = 3 THEN 1 END) as tier3_count
FROM kyc
`

type GetKYCStatsRow struct {
	TotalKyc      int64 `json:"total_kyc"`
	PendingCount  int64 `json:"pending_count"`
	ActiveCount   int64 `json:"active_count"`
	RejectedCount int64 `json:"rejected_count"`
	Tier1Count    int64 `json:"tier1_count"`
	Tier2Count    int64 `json:"tier2_count"`
	Tier3Count    int64 `json:"tier3_count"`
}

func (q *Queries) GetKYCStats(ctx context.Context) (GetKYCStatsRow, error) {
	row := q.db.QueryRowContext(ctx, getKYCStats)
	var i GetKYCStatsRow
	err := row.Scan(
		&i.TotalKyc,
		&i.PendingCount,
		&i.ActiveCount,
		&i.RejectedCount,
		&i.Tier1Count,
		&i.Tier2Count,
		&i.Tier3Count,
	)
	return i, err
}

const getPendingKYCRequests = `-- name: GetPendingKYCRequests :many
SELECT id, user_id, tier, daily_transfer_limit_ngn, wallet_balance_limit_ngn, status, verification_date, full_name, phone_number, email, bvn, nin, gender, selfie_url, id_type, id_number, id_image_url, state, lga, house_number, street_name, nearest_landmark, proof_of_address_type, proof_of_address_url, proof_of_address_date, created_at, updated_at, additional_info FROM kyc 
WHERE status = 'pending' 
ORDER BY created_at ASC
`

func (q *Queries) GetPendingKYCRequests(ctx context.Context) ([]Kyc, error) {
	rows, err := q.db.QueryContext(ctx, getPendingKYCRequests)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Kyc{}
	for rows.Next() {
		var i Kyc
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Tier,
			&i.DailyTransferLimitNgn,
			&i.WalletBalanceLimitNgn,
			&i.Status,
			&i.VerificationDate,
			&i.FullName,
			&i.PhoneNumber,
			&i.Email,
			&i.Bvn,
			&i.Nin,
			&i.Gender,
			&i.SelfieUrl,
			&i.IDType,
			&i.IDNumber,
			&i.IDImageUrl,
			&i.State,
			&i.Lga,
			&i.HouseNumber,
			&i.StreetName,
			&i.NearestLandmark,
			&i.ProofOfAddressType,
			&i.ProofOfAddressUrl,
			&i.ProofOfAddressDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AdditionalInfo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getUserAndKYCByID = `-- name: GetUserAndKYCByID :one
SELECT 
    u.id, u.avatar_url, u.avatar_blob, u.first_name, u.last_name, u.email, u.hashed_password, u.hashed_passcode, u.hashed_pin, u.phone_number, u.role, u.verified, u.is_kyc_verified, u.created_at, u.updated_at, u.deleted_at, u.has_wallets, u.user_tag, u.fresh_chat_id, u.is_active,
    k.id, k.user_id, k.tier, k.daily_transfer_limit_ngn, k.wallet_balance_limit_ngn, k.status, k.verification_date, k.full_name, k.phone_number, k.email, k.bvn, k.nin, k.gender, k.selfie_url, k.id_type, k.id_number, k.id_image_url, k.state, k.lga, k.house_number, k.street_name, k.nearest_landmark, k.proof_of_address_type, k.proof_of_address_url, k.proof_of_address_date, k.created_at, k.updated_at, k.additional_info
FROM kyc k
LEFT JOIN users u ON k.user_id = u.id 
WHERE k.id = $1 LIMIT 1
`

type GetUserAndKYCByIDRow struct {
	ID                    sql.NullInt64         `json:"id"`
	AvatarUrl             sql.NullString        `json:"avatar_url"`
	AvatarBlob            []byte                `json:"avatar_blob"`
	FirstName             sql.NullString        `json:"first_name"`
	LastName              sql.NullString        `json:"last_name"`
	Email                 sql.NullString        `json:"email"`
	HashedPassword        sql.NullString        `json:"hashed_password"`
	HashedPasscode        sql.NullString        `json:"hashed_passcode"`
	HashedPin             sql.NullString        `json:"hashed_pin"`
	PhoneNumber           sql.NullString        `json:"phone_number"`
	Role                  sql.NullString        `json:"role"`
	Verified              sql.NullBool          `json:"verified"`
	IsKycVerified         sql.NullBool          `json:"is_kyc_verified"`
	CreatedAt             sql.NullTime          `json:"created_at"`
	UpdatedAt             sql.NullTime          `json:"updated_at"`
	DeletedAt             sql.NullTime          `json:"deleted_at"`
	HasWallets            sql.NullBool          `json:"has_wallets"`
	UserTag               sql.NullString        `json:"user_tag"`
	FreshChatID           sql.NullString        `json:"fresh_chat_id"`
	IsActive              sql.NullBool          `json:"is_active"`
	ID_2                  int64                 `json:"id_2"`
	UserID                int32                 `json:"user_id"`
	Tier                  int32                 `json:"tier"`
	DailyTransferLimitNgn sql.NullString        `json:"daily_transfer_limit_ngn"`
	WalletBalanceLimitNgn sql.NullString        `json:"wallet_balance_limit_ngn"`
	Status                string                `json:"status"`
	VerificationDate      sql.NullTime          `json:"verification_date"`
	FullName              sql.NullString        `json:"full_name"`
	PhoneNumber_2         sql.NullString        `json:"phone_number_2"`
	Email_2               sql.NullString        `json:"email_2"`
	Bvn                   sql.NullString        `json:"bvn"`
	Nin                   sql.NullString        `json:"nin"`
	Gender                sql.NullString        `json:"gender"`
	SelfieUrl             sql.NullString        `json:"selfie_url"`
	IDType                sql.NullString        `json:"id_type"`
	IDNumber              sql.NullString        `json:"id_number"`
	IDImageUrl            sql.NullString        `json:"id_image_url"`
	State                 sql.NullString        `json:"state"`
	Lga                   sql.NullString        `json:"lga"`
	HouseNumber           sql.NullString        `json:"house_number"`
	StreetName            sql.NullString        `json:"street_name"`
	NearestLandmark       sql.NullString        `json:"nearest_landmark"`
	ProofOfAddressType    sql.NullString        `json:"proof_of_address_type"`
	ProofOfAddressUrl     sql.NullString        `json:"proof_of_address_url"`
	ProofOfAddressDate    sql.NullTime          `json:"proof_of_address_date"`
	CreatedAt_2           time.Time             `json:"created_at_2"`
	UpdatedAt_2           time.Time             `json:"updated_at_2"`
	AdditionalInfo        pqtype.NullRawMessage `json:"additional_info"`
}

func (q *Queries) GetUserAndKYCByID(ctx context.Context, id int64) (GetUserAndKYCByIDRow, error) {
	row := q.db.QueryRowContext(ctx, getUserAndKYCByID, id)
	var i GetUserAndKYCByIDRow
	err := row.Scan(
		&i.ID,
		&i.AvatarUrl,
		&i.AvatarBlob,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.HashedPassword,
		&i.HashedPasscode,
		&i.HashedPin,
		&i.PhoneNumber,
		&i.Role,
		&i.Verified,
		&i.IsKycVerified,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
		&i.HasWallets,
		&i.UserTag,
		&i.FreshChatID,
		&i.IsActive,
		&i.ID_2,
		&i.UserID,
		&i.Tier,
		&i.DailyTransferLimitNgn,
		&i.WalletBalanceLimitNgn,
		&i.Status,
		&i.VerificationDate,
		&i.FullName,
		&i.PhoneNumber_2,
		&i.Email_2,
		&i.Bvn,
		&i.Nin,
		&i.Gender,
		&i.SelfieUrl,
		&i.IDType,
		&i.IDNumber,
		&i.IDImageUrl,
		&i.State,
		&i.Lga,
		&i.HouseNumber,
		&i.StreetName,
		&i.NearestLandmark,
		&i.ProofOfAddressType,
		&i.ProofOfAddressUrl,
		&i.ProofOfAddressDate,
		&i.CreatedAt_2,
		&i.UpdatedAt_2,
		&i.AdditionalInfo,
	)
	return i, err
}

const listAllKYC = `-- name: ListAllKYC :many
SELECT id, user_id, tier, daily_transfer_limit_ngn, wallet_balance_limit_ngn, status, verification_date, full_name, phone_number, email, bvn, nin, gender, selfie_url, id_type, id_number, id_image_url, state, lga, house_number, street_name, nearest_landmark, proof_of_address_type, proof_of_address_url, proof_of_address_date, created_at, updated_at, additional_info 
FROM kyc 
ORDER BY created_at DESC
`

func (q *Queries) ListAllKYC(ctx context.Context) ([]Kyc, error) {
	rows, err := q.db.QueryContext(ctx, listAllKYC)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Kyc{}
	for rows.Next() {
		var i Kyc
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.Tier,
			&i.DailyTransferLimitNgn,
			&i.WalletBalanceLimitNgn,
			&i.Status,
			&i.VerificationDate,
			&i.FullName,
			&i.PhoneNumber,
			&i.Email,
			&i.Bvn,
			&i.Nin,
			&i.Gender,
			&i.SelfieUrl,
			&i.IDType,
			&i.IDNumber,
			&i.IDImageUrl,
			&i.State,
			&i.Lga,
			&i.HouseNumber,
			&i.StreetName,
			&i.NearestLandmark,
			&i.ProofOfAddressType,
			&i.ProofOfAddressUrl,
			&i.ProofOfAddressDate,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.AdditionalInfo,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateKYCAddress = `-- name: UpdateKYCAddress :one
UPDATE kyc 
SET 
    state = $2,
    lga = $3,
    house_number = $4,
    street_name = $5,
    nearest_landmark = $6,
    updated_at = now()
WHERE id = $1 
RETURNING id, user_id, tier, daily_transfer_limit_ngn, wallet_balance_limit_ngn, status, verification_date, full_name, phone_number, email, bvn, nin, gender, selfie_url, id_type, id_number, id_image_url, state, lga, house_number, street_name, nearest_landmark, proof_of_address_type, proof_of_address_url, proof_of_address_date, created_at, updated_at, additional_info
`

type UpdateKYCAddressParams struct {
	ID              int64          `json:"id"`
	State           sql.NullString `json:"state"`
	Lga             sql.NullString `json:"lga"`
	HouseNumber     sql.NullString `json:"house_number"`
	StreetName      sql.NullString `json:"street_name"`
	NearestLandmark sql.NullString `json:"nearest_landmark"`
}

func (q *Queries) UpdateKYCAddress(ctx context.Context, arg UpdateKYCAddressParams) (Kyc, error) {
	row := q.db.QueryRowContext(ctx, updateKYCAddress,
		arg.ID,
		arg.State,
		arg.Lga,
		arg.HouseNumber,
		arg.StreetName,
		arg.NearestLandmark,
	)
	var i Kyc
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Tier,
		&i.DailyTransferLimitNgn,
		&i.WalletBalanceLimitNgn,
		&i.Status,
		&i.VerificationDate,
		&i.FullName,
		&i.PhoneNumber,
		&i.Email,
		&i.Bvn,
		&i.Nin,
		&i.Gender,
		&i.SelfieUrl,
		&i.IDType,
		&i.IDNumber,
		&i.IDImageUrl,
		&i.State,
		&i.Lga,
		&i.HouseNumber,
		&i.StreetName,
		&i.NearestLandmark,
		&i.ProofOfAddressType,
		&i.ProofOfAddressUrl,
		&i.ProofOfAddressDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdditionalInfo,
	)
	return i, err
}

const updateKYCLevel1 = `-- name: UpdateKYCLevel1 :one
UPDATE kyc 
SET 
    full_name = $2,
    phone_number = $3,
    email = $4,
    bvn = $5,
    gender = $6,
    selfie_url = $7,
    updated_at = now()
WHERE id = $1 
RETURNING id, user_id, tier, daily_transfer_limit_ngn, wallet_balance_limit_ngn, status, verification_date, full_name, phone_number, email, bvn, nin, gender, selfie_url, id_type, id_number, id_image_url, state, lga, house_number, street_name, nearest_landmark, proof_of_address_type, proof_of_address_url, proof_of_address_date, created_at, updated_at, additional_info
`

type UpdateKYCLevel1Params struct {
	ID          int64          `json:"id"`
	FullName    sql.NullString `json:"full_name"`
	PhoneNumber sql.NullString `json:"phone_number"`
	Email       sql.NullString `json:"email"`
	Bvn         sql.NullString `json:"bvn"`
	Gender      sql.NullString `json:"gender"`
	SelfieUrl   sql.NullString `json:"selfie_url"`
}

func (q *Queries) UpdateKYCLevel1(ctx context.Context, arg UpdateKYCLevel1Params) (Kyc, error) {
	row := q.db.QueryRowContext(ctx, updateKYCLevel1,
		arg.ID,
		arg.FullName,
		arg.PhoneNumber,
		arg.Email,
		arg.Bvn,
		arg.Gender,
		arg.SelfieUrl,
	)
	var i Kyc
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Tier,
		&i.DailyTransferLimitNgn,
		&i.WalletBalanceLimitNgn,
		&i.Status,
		&i.VerificationDate,
		&i.FullName,
		&i.PhoneNumber,
		&i.Email,
		&i.Bvn,
		&i.Nin,
		&i.Gender,
		&i.SelfieUrl,
		&i.IDType,
		&i.IDNumber,
		&i.IDImageUrl,
		&i.State,
		&i.Lga,
		&i.HouseNumber,
		&i.StreetName,
		&i.NearestLandmark,
		&i.ProofOfAddressType,
		&i.ProofOfAddressUrl,
		&i.ProofOfAddressDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdditionalInfo,
	)
	return i, err
}

const updateKYCLevel3 = `-- name: UpdateKYCLevel3 :one
UPDATE kyc 
SET 
    proof_of_address_type = $2,
    proof_of_address_url = $3,
    proof_of_address_date = $4,
    updated_at = now()
WHERE id = $1 
RETURNING id, user_id, tier, daily_transfer_limit_ngn, wallet_balance_limit_ngn, status, verification_date, full_name, phone_number, email, bvn, nin, gender, selfie_url, id_type, id_number, id_image_url, state, lga, house_number, street_name, nearest_landmark, proof_of_address_type, proof_of_address_url, proof_of_address_date, created_at, updated_at, additional_info
`

type UpdateKYCLevel3Params struct {
	ID                 int64          `json:"id"`
	ProofOfAddressType sql.NullString `json:"proof_of_address_type"`
	ProofOfAddressUrl  sql.NullString `json:"proof_of_address_url"`
	ProofOfAddressDate sql.NullTime   `json:"proof_of_address_date"`
}

func (q *Queries) UpdateKYCLevel3(ctx context.Context, arg UpdateKYCLevel3Params) (Kyc, error) {
	row := q.db.QueryRowContext(ctx, updateKYCLevel3,
		arg.ID,
		arg.ProofOfAddressType,
		arg.ProofOfAddressUrl,
		arg.ProofOfAddressDate,
	)
	var i Kyc
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Tier,
		&i.DailyTransferLimitNgn,
		&i.WalletBalanceLimitNgn,
		&i.Status,
		&i.VerificationDate,
		&i.FullName,
		&i.PhoneNumber,
		&i.Email,
		&i.Bvn,
		&i.Nin,
		&i.Gender,
		&i.SelfieUrl,
		&i.IDType,
		&i.IDNumber,
		&i.IDImageUrl,
		&i.State,
		&i.Lga,
		&i.HouseNumber,
		&i.StreetName,
		&i.NearestLandmark,
		&i.ProofOfAddressType,
		&i.ProofOfAddressUrl,
		&i.ProofOfAddressDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdditionalInfo,
	)
	return i, err
}

const updateKYCLimits = `-- name: UpdateKYCLimits :one
UPDATE kyc 
SET 
    daily_transfer_limit_ngn = $2,
    wallet_balance_limit_ngn = $3,
    updated_at = now()
WHERE id = $1 
RETURNING id, user_id, tier, daily_transfer_limit_ngn, wallet_balance_limit_ngn, status, verification_date, full_name, phone_number, email, bvn, nin, gender, selfie_url, id_type, id_number, id_image_url, state, lga, house_number, street_name, nearest_landmark, proof_of_address_type, proof_of_address_url, proof_of_address_date, created_at, updated_at, additional_info
`

type UpdateKYCLimitsParams struct {
	ID                    int64          `json:"id"`
	DailyTransferLimitNgn sql.NullString `json:"daily_transfer_limit_ngn"`
	WalletBalanceLimitNgn sql.NullString `json:"wallet_balance_limit_ngn"`
}

func (q *Queries) UpdateKYCLimits(ctx context.Context, arg UpdateKYCLimitsParams) (Kyc, error) {
	row := q.db.QueryRowContext(ctx, updateKYCLimits, arg.ID, arg.DailyTransferLimitNgn, arg.WalletBalanceLimitNgn)
	var i Kyc
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Tier,
		&i.DailyTransferLimitNgn,
		&i.WalletBalanceLimitNgn,
		&i.Status,
		&i.VerificationDate,
		&i.FullName,
		&i.PhoneNumber,
		&i.Email,
		&i.Bvn,
		&i.Nin,
		&i.Gender,
		&i.SelfieUrl,
		&i.IDType,
		&i.IDNumber,
		&i.IDImageUrl,
		&i.State,
		&i.Lga,
		&i.HouseNumber,
		&i.StreetName,
		&i.NearestLandmark,
		&i.ProofOfAddressType,
		&i.ProofOfAddressUrl,
		&i.ProofOfAddressDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdditionalInfo,
	)
	return i, err
}

const updateKYCNIN = `-- name: UpdateKYCNIN :one
UPDATE kyc 
SET 
    nin = $2,
    updated_at = now()
WHERE id = $1 
RETURNING id, user_id, tier, daily_transfer_limit_ngn, wallet_balance_limit_ngn, status, verification_date, full_name, phone_number, email, bvn, nin, gender, selfie_url, id_type, id_number, id_image_url, state, lga, house_number, street_name, nearest_landmark, proof_of_address_type, proof_of_address_url, proof_of_address_date, created_at, updated_at, additional_info
`

type UpdateKYCNINParams struct {
	ID  int64          `json:"id"`
	Nin sql.NullString `json:"nin"`
}

func (q *Queries) UpdateKYCNIN(ctx context.Context, arg UpdateKYCNINParams) (Kyc, error) {
	row := q.db.QueryRowContext(ctx, updateKYCNIN, arg.ID, arg.Nin)
	var i Kyc
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Tier,
		&i.DailyTransferLimitNgn,
		&i.WalletBalanceLimitNgn,
		&i.Status,
		&i.VerificationDate,
		&i.FullName,
		&i.PhoneNumber,
		&i.Email,
		&i.Bvn,
		&i.Nin,
		&i.Gender,
		&i.SelfieUrl,
		&i.IDType,
		&i.IDNumber,
		&i.IDImageUrl,
		&i.State,
		&i.Lga,
		&i.HouseNumber,
		&i.StreetName,
		&i.NearestLandmark,
		&i.ProofOfAddressType,
		&i.ProofOfAddressUrl,
		&i.ProofOfAddressDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdditionalInfo,
	)
	return i, err
}

const updateKYCStatus = `-- name: UpdateKYCStatus :one
UPDATE kyc 
SET 
    status = $2,
    updated_at = now(),
    verification_date = CASE 
        WHEN $2 = 'active' THEN now() 
        ELSE verification_date 
    END
WHERE id = $1 
RETURNING id, user_id, tier, daily_transfer_limit_ngn, wallet_balance_limit_ngn, status, verification_date, full_name, phone_number, email, bvn, nin, gender, selfie_url, id_type, id_number, id_image_url, state, lga, house_number, street_name, nearest_landmark, proof_of_address_type, proof_of_address_url, proof_of_address_date, created_at, updated_at, additional_info
`

type UpdateKYCStatusParams struct {
	ID     int64  `json:"id"`
	Status string `json:"status"`
}

func (q *Queries) UpdateKYCStatus(ctx context.Context, arg UpdateKYCStatusParams) (Kyc, error) {
	row := q.db.QueryRowContext(ctx, updateKYCStatus, arg.ID, arg.Status)
	var i Kyc
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Tier,
		&i.DailyTransferLimitNgn,
		&i.WalletBalanceLimitNgn,
		&i.Status,
		&i.VerificationDate,
		&i.FullName,
		&i.PhoneNumber,
		&i.Email,
		&i.Bvn,
		&i.Nin,
		&i.Gender,
		&i.SelfieUrl,
		&i.IDType,
		&i.IDNumber,
		&i.IDImageUrl,
		&i.State,
		&i.Lga,
		&i.HouseNumber,
		&i.StreetName,
		&i.NearestLandmark,
		&i.ProofOfAddressType,
		&i.ProofOfAddressUrl,
		&i.ProofOfAddressDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdditionalInfo,
	)
	return i, err
}

const updateKYCTier = `-- name: UpdateKYCTier :one
UPDATE kyc 
SET 
    tier = $2,
    updated_at = now()
WHERE id = $1 
RETURNING id, user_id, tier, daily_transfer_limit_ngn, wallet_balance_limit_ngn, status, verification_date, full_name, phone_number, email, bvn, nin, gender, selfie_url, id_type, id_number, id_image_url, state, lga, house_number, street_name, nearest_landmark, proof_of_address_type, proof_of_address_url, proof_of_address_date, created_at, updated_at, additional_info
`

type UpdateKYCTierParams struct {
	ID   int64 `json:"id"`
	Tier int32 `json:"tier"`
}

func (q *Queries) UpdateKYCTier(ctx context.Context, arg UpdateKYCTierParams) (Kyc, error) {
	row := q.db.QueryRowContext(ctx, updateKYCTier, arg.ID, arg.Tier)
	var i Kyc
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.Tier,
		&i.DailyTransferLimitNgn,
		&i.WalletBalanceLimitNgn,
		&i.Status,
		&i.VerificationDate,
		&i.FullName,
		&i.PhoneNumber,
		&i.Email,
		&i.Bvn,
		&i.Nin,
		&i.Gender,
		&i.SelfieUrl,
		&i.IDType,
		&i.IDNumber,
		&i.IDImageUrl,
		&i.State,
		&i.Lga,
		&i.HouseNumber,
		&i.StreetName,
		&i.NearestLandmark,
		&i.ProofOfAddressType,
		&i.ProofOfAddressUrl,
		&i.ProofOfAddressDate,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.AdditionalInfo,
	)
	return i, err
}
