// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: referral_entry.sql

package db

import (
	"context"
)

const addNewReferralEntry = `-- name: AddNewReferralEntry :one
INSERT INTO referral_entries (
    referral_key,
    referrer,
    referee,
    referral_detail
) VALUES ($1, $2, $3, $4) RETURNING id, referral_key, referrer, referee, referral_detail, created_at, updated_at, deleted_at
`

type AddNewReferralEntryParams struct {
	ReferralKey    string `json:"referral_key"`
	Referrer       int32  `json:"referrer"`
	Referee        int32  `json:"referee"`
	ReferralDetail string `json:"referral_detail"`
}

func (q *Queries) AddNewReferralEntry(ctx context.Context, arg AddNewReferralEntryParams) (ReferralEntry, error) {
	row := q.db.QueryRowContext(ctx, addNewReferralEntry,
		arg.ReferralKey,
		arg.Referrer,
		arg.Referee,
		arg.ReferralDetail,
	)
	var i ReferralEntry
	err := row.Scan(
		&i.ID,
		&i.ReferralKey,
		&i.Referrer,
		&i.Referee,
		&i.ReferralDetail,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const deleteAllEntries = `-- name: DeleteAllEntries :exec
DELETE FROM referral_entries
`

func (q *Queries) DeleteAllEntries(ctx context.Context) error {
	_, err := q.db.ExecContext(ctx, deleteAllEntries)
	return err
}

const deleteReferralEntry = `-- name: DeleteReferralEntry :exec
DELETE FROM referral_entries WHERE id = $1
`

func (q *Queries) DeleteReferralEntry(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteReferralEntry, id)
	return err
}

const getReferralEntryByID = `-- name: GetReferralEntryByID :one
SELECT id, referral_key, referrer, referee, referral_detail, created_at, updated_at, deleted_at FROM referral_entries WHERE id = $1
`

func (q *Queries) GetReferralEntryByID(ctx context.Context, id int64) (ReferralEntry, error) {
	row := q.db.QueryRowContext(ctx, getReferralEntryByID, id)
	var i ReferralEntry
	err := row.Scan(
		&i.ID,
		&i.ReferralKey,
		&i.Referrer,
		&i.Referee,
		&i.ReferralDetail,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getReferralEntryByReferee = `-- name: GetReferralEntryByReferee :one
SELECT id, referral_key, referrer, referee, referral_detail, created_at, updated_at, deleted_at FROM referral_entries WHERE referee = $1
`

func (q *Queries) GetReferralEntryByReferee(ctx context.Context, referee int32) (ReferralEntry, error) {
	row := q.db.QueryRowContext(ctx, getReferralEntryByReferee, referee)
	var i ReferralEntry
	err := row.Scan(
		&i.ID,
		&i.ReferralKey,
		&i.Referrer,
		&i.Referee,
		&i.ReferralDetail,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}

const getReferralEntryByReferrer = `-- name: GetReferralEntryByReferrer :one
SELECT id, referral_key, referrer, referee, referral_detail, created_at, updated_at, deleted_at FROM referral_entries WHERE referrer = $1
`

func (q *Queries) GetReferralEntryByReferrer(ctx context.Context, referrer int32) (ReferralEntry, error) {
	row := q.db.QueryRowContext(ctx, getReferralEntryByReferrer, referrer)
	var i ReferralEntry
	err := row.Scan(
		&i.ID,
		&i.ReferralKey,
		&i.Referrer,
		&i.Referee,
		&i.ReferralDetail,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.DeletedAt,
	)
	return i, err
}
